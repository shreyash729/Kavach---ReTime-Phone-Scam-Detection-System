from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import eventlet
import os
import vosk
import json
import pyaudio
import numpy as np
import asyncio
from telethon import TelegramClient, events
import re
eventlet.monkey_patch()

# Initialize Flask and SocketIO
app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
#socketio = SocketIO(app, async_mode='gevent', cors_allowed_origins="*")
socketio = SocketIO(
    app,
    async_mode='eventlet',
    cors_allowed_origins="*",
    use_reloader=False,
    ping_timeout=60000,  # 60 seconds
    ping_interval=25000  # 25 seconds
)
# Telegram API Configuration
API_ID = os.getenv("TELEGRAM_API_ID") # your telegram api ID
API_HASH = os.getenv("TELEGRAM_API_HASH")  # your telegram api hash
PHONE_NUMBER = os.getenv("PHONE_NUMBER")  # Your phone number Include country code (e.g., +91xxxxxx)
BOT_X_USERNAME = "@TrueCaller_Z_Bot"  

# Vosk Model Configuration
VOSK_MODEL_PATH = "./vosk-model-small-hi-0.22" 
assert os.path.exists(VOSK_MODEL_PATH), "Vosk model path is incorrect or missing!"

# Load Vosk Model
vosk_model = vosk.Model(VOSK_MODEL_PATH)
recognizer = vosk.KaldiRecognizer(vosk_model, 16000)  # Sample rate 16kHz

# Scam Keywords (Hindi)
SCAM_KEYWORDS = [
    "рдкреИрд╕реЗ рднреЗрдЬреЛ", "рдЖрдкрдХрд╛ рдЕрдХрд╛рдЙрдВрдЯ рдмреНрд▓реЙрдХ", "рдкреБрд▓рд┐рд╕ рдЧрд┐рд░рдлреНрддрд╛рд░реА","рдпреВрдкреАрдЖрдИ рдкрд┐рди",  
    "рдЖрдкрдХреЗ рдмреЗрдЯреЗ", "рдЖрдкрдХреА рдмреЗрдЯреА", "рдУрдЯреАрдкреА рдмрддрд╛рдЗрдП", "рдЗрдорд░рдЬреЗрдВрд╕реА рдкреИрд╕рд╛",
    "рдкреИрд╕реЗ", "рдУрдЯреАрдкреА", "рдмреИрдВрдХ", "рдЕрдХрд╛рдЙрдВрдЯ", "рд▓реЙрдЯрд░реА", "рдзреЛрдЦрд╛рдзрдбрд╝реА", "рдардЧреА", "рдкреБрд▓рд┐рд╕", "рдЧрд┐рд░рдлреНрддрд╛рд░реА","рдкреЗрдЯреАрдПрдо рдХрд╕реНрдЯрдорд░ рдХреЗрдпрд░", "рдХреЗрд╡рд╛рдИрд╕реА","рдкреЗрдЯреАрдПрдо рд╡реЙрд▓реЗрдЯ","рд╡реЙрд▓реЗрдЯ","рдЕрдкрдбреЗрдЯ рдирд╣реАрдВ рд╣реЛрдиреЗ рдХреЗ рдХрд╛рд░рдг", "рдПрдкреНрд▓реАрдХреЗрд╢рди рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдирд╛ рд╣","рдкреНрд▓реЗ рд╕реНрдЯреЛрд░ рдХреЛ рдЦреЛрд▓рд┐рдП","рдмреЗрдЯреЗ рд╕реЗ рдмрд╛рдд рдХрд░рд╛ рджреВ","рдХреНрд░рд╛рдЗрдо рдмреНрд░рд╛рдВрдЪ рд╕реЗ","рдПрдлрдЖрдЗрдЖрд░ рдореБрдХрджрдорд╛ рджрд░реНрдЬ рд╣реБрдЖ рд╣реИ","рдЬреБрд░реНрдорд╛рдирд╛ рд▓рдЧреЗрдЧрд╛","рдЬреЗрд▓ рд╣реЛрдЧреА","рдореБрдХрджрдореЗ рдХреА рдЪрд╛рд░реНрдЬ рд╕реАрдЯ","рд▓рдбрд╝рдХреА рдХрд╛ рд░реЗрдк рдХрд┐рдпрд╛ рд╣реИ","рдЖрдкрдХрд╛ рдмреЗрдЯрд╛ рдЗрд╕ рд╕рдордп рдЕрд░реЗрд╕реНрдЯ рд╣реЛ рдЪреБрдХрд╛ рд╣реИ","рдЕрд░реЗрд╕реНрдЯ рд╣реЛ рдЪреБрдХрд╛ рд╣реИ","рдЧреВрдЧрд▓ рдкреЗ","рд╕рд░ рдЖрдк рдЧреВрдЧрд▓ рдкреЗ рдлрд╝реЛрди рдкреЗ рдХреНрдпрд╛ рдпреВрдЬрд╝ рдХрд░рддреЗ рд╣реИрдВ?","рдлрд╝реЛрди рдкреЗ","рдмрдЪреНрдЪреЗ рдХреЛ рдХреНрд▓рд┐рдпрд░","рдЖрдкрдХрд╛ рдмреИрдВрдХ рдЕрдХрд╛рдЙрдВрдЯ рд╣реИрдХ рд╣реЛ рдЧрдпрд╛ рд╣реИ","рдЖрдкрдХрд╛ рдкреИрди рдХрд╛рд░реНрдб рдмреНрд▓реЙрдХ рд╣реЛ рдЧрдпрд╛ рд╣реИ","рдЖрдкрдХреЛ рддреБрд░рдВрдд рдкреИрд╕реЗ рдЯреНрд░рд╛рдВрд╕рдлрд░ рдХрд░рдиреЗ рд╣реЛрдВрдЧреЗ","рдЖрдкрдХреЗ рдирд╛рдо рд╕реЗ рд▓реЛрди рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ","рдЯреИрдХреНрд╕ рднрд░рдиреЗ рдореЗрдВ рджреЗрд░реА рд╣реБрдИ рд╣реИ, рдЬреБрд░реНрдорд╛рдирд╛ рд▓рдЧреЗрдЧрд╛","рдЖрдкрдХрд╛ рдХреНрд░реЗрдбрд┐рдЯ рдХрд╛рд░реНрдб рдЕрд╡реИрдз рд░реВрдк рд╕реЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реБрдЖ рд╣реИ","рдЖрдкрдХреЗ рдЦрд┐рд▓рд╛рдл рдПрдлрдЖрдЗрдЖрд░ рджрд░реНрдЬ рд╣реЛ рдЪреБрдХреА рд╣реИ","рдЖрдкрдХреЛ рдХреЛрд░реНрдЯ рдореЗрдВ рдкреЗрд╢ рд╣реЛрдирд╛ рд╣реЛрдЧрд╛","рдЖрдкрдХрд╛ рдирд╛рдо рдХреНрд░рд╛рдЗрдо рд░рд┐рдХреЙрд░реНрдб рдореЗрдВ рдЖрдпрд╛ рд╣реИ","рдЖрдкрдХреЗ рдШрд░ рдкрд░ рдкреБрд▓рд┐рд╕ рдЖ рд░рд╣реА рд╣реИ","рдЖрдкрдХреЛ рдЬрдорд╛рдирдд рджрд┐рд▓рд╡рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдкреИрд╕реЗ рдЪрд╛рд╣рд┐рдП","рдореИрдВ рдЖрдкрдХреЗ рдмреИрдВрдХ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реВрдБ","рд╣рдо рд╕рд░рдХрд╛рд░реА рд╡рд┐рднрд╛рдЧ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ","рдЖрдкрдХрд╛ рдирдВрдмрд░ рд▓рдХреА рдбреНрд░рд╛ рдореЗрдВ рдирд┐рдХрд▓рд╛ рд╣реИ","рдЖрдкрдХреЛ рдлреНрд░реА рдореЗрдВ рдореЛрдмрд╛рдЗрд▓ рдорд┐рд▓реЗрдЧрд╛","рдЖрдкрдХреЗ рд░рд┐рд╢реНрддреЗрджрд╛рд░ рдиреЗ рдореБрдЭреЗ рдкреИрд╕реЗ рднреЗрдЬрдиреЗ рдХреЛ рдХрд╣рд╛","рдЖрдкрдХреЗ рдлреЛрди рдореЗрдВ рд╡рд╛рдпрд░рд╕ рд╣реИ","рдЖрдкрдХреЛ рдирдпрд╛ рд╕рд┐рдо рдХрд╛рд░реНрдб рдПрдХреНрдЯрд┐рд╡реЗрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛","рд╣рдореЗрдВ рдЖрдкрдХрд╛ рд░рд┐рдореЛрдЯ рдПрдХреНрд╕реЗрд╕ рджреАрдЬрд┐рдП","рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рд╢реЗрдпрд░ рдХрд░реЗрдВ","рдЖрдкрдХреЗ рдмреЗрдЯреЗ рдХреЛ рдПрдХреНрд╕реАрдбреЗрдВрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИ","рдЖрдкрдХреЗ рдмреЗрдЯреА рдХреЛ рдПрдХреНрд╕реАрдбреЗрдВрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИ","рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рд╡рд╛рд▓реЗ рдХреЛ рд╣реЙрд╕реНрдкрд┐рдЯрд▓ рдореЗрдВ рднрд░реНрддреА рдХрд░рд╛рдирд╛ рд╣реИ","рдЖрдкрдХреЗ рд░рд┐рд╢реНрддреЗрджрд╛рд░ рдХреЛ рдЬреЗрд▓ рд╕реЗ рдЫреБрдбрд╝рд╛рдирд╛ рд╣реИ","рдЖрдкрдХрд╛ рдЖрдзрд╛рд░ рдирдВрдмрд░ рд╕рд╕реНрдкреЗрдВрдб рд╣реЛ рдЧрдпрд╛ рд╣реИ","рдЖрдкрдХреЗ рдпреВрдкреАрдЖрдИ рдЖрдИрдбреА рд╕реЗ рдЧрд▓рдд рдЯреНрд░рд╛рдВрдЬреИрдХреНрд╢рди рд╣реБрдЖ рд╣реИ", "рдЖрдкрдХреЛ рдХреЗрд╡рд╛рдИрд╕реА рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛ рд╣реЛрдЧрд╛", "рдЖрдкрдХрд╛ рд╡реНрд╣рд╛рдЯреНрд╕рдПрдк рдирдВрдмрд░ рдбрд┐рд▓реАрдЯ рд╣реЛ рдЬрд╛рдПрдЧрд╛","рдЖрдкрдХреЛ рдХреИрд╢рдмреИрдХ рдорд┐рд▓реЗрдЧрд╛","рдЖрдкрдХреЛ рд░рд┐рдлрдВрдб рдорд┐рд▓реЗрдЧрд╛","рдПрд╕рдмреАрдЖрдИ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реВрдВ","рдЕрдкрд╣рд░рдг","рдХрд┐рдбрдиреИрдкрд┐рдВрдЧ","рдХрд┐рдбрдиреИрдк","рдЕрд╢реНрд▓реАрд▓  рд╡реАрдбрд┐рдпреЛ","рдЕрд╢реНрд▓реАрд▓ рдлреЛрдЯреЛрдВ","рдПрдХреНрд╕реАрдбреЗрдВрдЯ рд╣реЛрдЧрдпрд╛ рд╣реИ","рдПрдХреНрд╕реАрдбреЗрдВрдЯ рд╣реБрдЖ рд╣реИ","рд░реЗрдк рдХрд┐рдпрд╛ рд╣реИ","рд░реЗрдк рдХреЗрд╕ рдореЗрдВ рдкрдХрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ","рд╕рдЯреНрдЯреЗ рдореЗрдВ рд╣рд╛рд░ рдЧрдпрд╛","рд░реЗрдб рдореЗрдВ рдкрдХрдбрд╝рд╛ рдЧрдпрд╛","рд░реЗрдб","рдкреБрд▓рд┐рд╕ рдЪреМрдХреА","рдерд╛рдирд╛ рдкреНрд░рднрд╛рд░реА","рдкреБрд▓рд┐рд╕ рдерд╛рдирд╛","рдореИрд╕реЗрдЬ рдЖрдпрд╛ рд╣реЛрдЧрд╛","рдирдВрдмрд░ рд╣реЛрдЧрд╛","рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди","рдЕрдХрд╛рдЙрдВрдЯ рдПрдХреНрд╕рдкрд╛рдпрд░", "рдЕрдХрд╛рдЙрдВрдЯ рд╕рд╕реНрдкреЗрдВрдб","рд╕рд╛рдЗрдмрд░ рдХреНрд░рд╛рдЗрдо","рд╕рд╛рдЗрдмрд░","рд▓реЛрди"
]
THRESHOLD = 2  # Number of scam words before confirming fraud

# Global state

scam_count = 0
user_alert_count = 0
audio_data = []
stream = None

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/lookup', methods=['POST'])

async def lookup():
    phone_number = request.json['number']
    try:
        telegram_response = await fetch_telegram_details(phone_number)
        #parsed_data = parse_telegram_response(telegram_response)
        return jsonify({
            'success': True,
            'data': telegram_response
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

# SocketIO Events
@socketio.on('client_event')
def handle_client_event(data):
    global scam_count, user_alert_count
    print('Received from client:', data)
    if scam_count < THRESHOLD:
        emit('server_event', {'message': 'No Severe scam detected till now'})
    if scam_count > THRESHOLD:
        emit('server_event', {'message': 'this Call might be a scam'})
        scam_count = 0



@socketio.on('start_call')
def handle_start_call():
    global stream, scam_count
    print("Call started - monitoring for fraud...")
    scam_count = 0
    stream = pyaudio.PyAudio().open(format=pyaudio.paInt16, 
                                  channels=1,
                                  rate=16000,
                                  input=True,
                                  frames_per_buffer=8000)
    socketio.start_background_task(target=scam_detection)

# Helper Functions

async def fetch_telegram_details(phone_number):
    """Fetch phone details from the Telegram bot."""
    async with TelegramClient("session_name", API_ID, API_HASH) as client:
        # Send phone number to bot
        await client.send_message(BOT_X_USERNAME, phone_number)
        await asyncio.sleep(5)

        # Fetch latest response
        async for msg in client.iter_messages(BOT_X_USERNAME, limit=1):
            return msg.text

import time
import json

def scam_detection():
    """Monitors the call for scam words in real-time."""
    global scam_count, audio_data
    try:
        while True:
            # Read audio data from the stream
            data = stream.read(2000, exception_on_overflow=False)
            audio_data.append(data)

            # Perform speech recognition
            if recognizer.AcceptWaveform(data):
                result = json.loads(recognizer.Result())
                text = result.get("text", "")

                if text:
                    print(f"ЁЯУЭ Recognized: {text}")

                    # Check for scam keywords
                    for keyword in SCAM_KEYWORDS:
                        if keyword in text:
                            scam_count += 1
                            print(f"ЁЯЪи SCAM ALERT! ({scam_count}/{THRESHOLD}) - Detected: {text}\n")

                            # Emit an event to the client if the threshold is reached
                            if scam_count >= THRESHOLD:
                                print("тЪая╕П Emitting fraud_detected event...")
                                try:
                                    socketio.emit('fraud_detected')
                                except Exception as e:
                                    print(f"Error emitting event: {e}")
                                scam_count = 0  # Reset the counter
                            break

            # Yield control back to the event loop
            eventlet.sleep(0.1)  # Small delay to prevent blocking

    except Exception as e:
        print(f"Error in scam_detection: {e}")

# Run the app
if __name__ == '__main__':
    print("Starting Flask server...")
    socketio.run(app,debug=False, host='0.0.0.0', port=5000)